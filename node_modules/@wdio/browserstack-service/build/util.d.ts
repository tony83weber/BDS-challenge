import type { Capabilities, Frameworks, Options } from '@wdio/types';
import type { BeforeCommandArgs, AfterCommandArgs } from '@wdio/reporter';
import type { UserConfig, UploadType, BrowserstackConfig } from './types.js';
import type { ITestCaseHookParameter } from './cucumber-types.js';
/**
 * get browser description for Browserstack service
 * @param cap browser capablities
 */
export declare function getBrowserDescription(cap: Capabilities.DesiredCapabilities): string;
/**
 * get correct browser capabilities object in both multiremote and normal setups
 * @param browser browser object
 * @param caps browser capbilities object. In case of multiremote, the object itself should have a property named 'capabilities'
 * @param browserName browser name in case of multiremote
 */
export declare function getBrowserCapabilities(browser: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser, caps?: Capabilities.RemoteCapability, browserName?: string): Capabilities.Capabilities;
/**
 * check for browserstack W3C capabilities. Does not support legacy capabilities
 * @param cap browser capabilities
 */
export declare function isBrowserstackCapability(cap?: Capabilities.Capabilities): boolean;
export declare function getParentSuiteName(fullTitle: string, testSuiteTitle: string): string;
export declare function launchTestSession(options: BrowserstackConfig & Options.Testrunner, config: Options.Testrunner, bsConfig: UserConfig): Promise<void>;
export declare function stopBuildUpstream(): Promise<{
    status: string;
    message: any;
} | undefined>;
export declare function getCiInfo(): {
    name: string;
    build_url: string | undefined;
    job_name: string | undefined;
    build_number: string | undefined;
} | {
    name: string;
    build_url: null;
    job_name: null;
    build_number: null;
} | {
    name: string;
    build_url: string | undefined;
    job_name: null;
    build_number: string | undefined;
} | null;
export declare function getGitMetaData(): Promise<{
    name: string;
    sha: string;
    short_sha: string;
    branch: string;
    tag: string | null;
    committer: string;
    committer_date: string;
    author: string;
    author_date: string;
    commit_message: string;
    root: string;
    common_git_dir: string;
    worktree_git_dir: string;
    last_tag: string | null;
    commits_since_last_tag: number;
    remotes: {
        name: string;
        url: any;
    }[];
} | undefined>;
export declare function getUniqueIdentifier(test: Frameworks.Test): string;
export declare function getUniqueIdentifierForCucumber(world: ITestCaseHookParameter): string;
export declare function getCloudProvider(browser: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser): string;
export declare function isBrowserstackSession(browser?: WebdriverIO.Browser | WebdriverIO.MultiRemoteBrowser): boolean | undefined;
export declare function getScenarioExamples(world: ITestCaseHookParameter): string[] | undefined;
export declare function removeAnsiColors(message: string): string;
export declare function getLogTag(eventType: string): string;
export declare function uploadEventData(eventData: UploadType | Array<UploadType>, eventUrl?: string): Promise<{
    status: string;
    message: string;
} | undefined>;
export declare function getHierarchy(fullTitle?: string): string[];
export declare function getHookType(hookName: string): string;
export declare function isScreenshotCommand(args: BeforeCommandArgs & AfterCommandArgs): boolean | "" | undefined;
export declare function shouldAddServiceVersion(config: Options.Testrunner, testObservability?: boolean): boolean;
export declare function batchAndPostEvents(eventUrl: string, kind: string, data: UploadType[]): Promise<void>;
export declare function getObservabilityUser(options: BrowserstackConfig & Options.Testrunner, config: Options.Testrunner): string | undefined;
export declare function getObservabilityKey(options: BrowserstackConfig & Options.Testrunner, config: Options.Testrunner): string | undefined;
export declare function getObservabilityProject(options: BrowserstackConfig & Options.Testrunner, bstackProjectName?: string): string | undefined;
export declare function getObservabilityBuild(options: BrowserstackConfig & Options.Testrunner, bstackBuildName?: string): string;
export declare function getObservabilityBuildTags(options: BrowserstackConfig & Options.Testrunner, bstackBuildTag?: string): string[];
export declare const sleep: (ms?: number) => Promise<unknown>;
//# sourceMappingURL=util.d.ts.map