import WDIOReporter from '@wdio/reporter';
import { v4 as uuidv4 } from 'uuid';
import { getCloudProvider, uploadEventData, getHierarchy } from './util.js';
import RequestQueueHandler from './request-handler.js';
export default class TestReporter extends WDIOReporter {
    _capabilities = {};
    _config;
    _observability = true;
    _sessionId;
    _suiteName;
    _requestQueueHandler = RequestQueueHandler.getInstance();
    onRunnerStart(runnerStats) {
        this._capabilities = runnerStats.capabilities;
        this._config = runnerStats.config;
        this._sessionId = runnerStats.sessionId;
        if (typeof this._config.testObservability !== 'undefined') {
            this._observability = this._config.testObservability;
        }
    }
    onSuiteStart(suiteStats) {
        this._suiteName = suiteStats.file;
    }
    async onTestSkip(testStats) {
        // cucumber steps call this method. We don't want step skipped state so skip for cucumber
        const framework = this._config?.framework;
        if (this._observability && framework !== 'cucumber') {
            const testData = {
                uuid: uuidv4(),
                type: testStats.type,
                name: testStats.title,
                body: {
                    lang: 'webdriverio',
                    code: null
                },
                scope: testStats.fullTitle,
                scopes: getHierarchy(testStats.fullTitle),
                identifier: testStats.fullTitle,
                file_name: this._suiteName,
                location: this._suiteName,
                started_at: (new Date()).toISOString(),
                framework: framework,
                finished_at: (new Date()).toISOString(),
                duration_in_ms: testStats._duration,
                retries: { limit: 0, attempts: 0 },
                result: testStats.state,
            };
            const cloudProvider = getCloudProvider({ options: { hostname: this._config?.hostname } });
            testData.integrations = {};
            testData.integrations[cloudProvider] = {
                capabilities: this._capabilities,
                session_id: this._sessionId,
                browser: this._capabilities?.browserName,
                browser_version: this._capabilities?.browserVersion,
                platform: this._capabilities?.platformName,
            };
            const uploadData = {
                event_type: 'TestRunFinished',
                test_run: testData
            };
            const req = this._requestQueueHandler.add(uploadData);
            if (req.proceed && req.data) {
                await uploadEventData(req.data, req.url);
            }
        }
    }
}
