import got from 'got';
import FormData from 'form-data';
import fs from 'node:fs';
import path from 'node:path';
import { createRequire } from 'node:module';
import { promisify } from 'node:util';
import { performance, PerformanceObserver } from 'node:perf_hooks';
import { SevereServiceError } from 'webdriverio';
import * as BrowserstackLocalLauncher from 'browserstack-local';
import logger from '@wdio/logger';
import { VALID_APP_EXTENSION } from './constants.js';
import { launchTestSession, shouldAddServiceVersion, stopBuildUpstream } from './util.js';
const require = createRequire(import.meta.url);
const { version: bstackServiceVersion } = require('../package.json');
const log = logger('@wdio/browserstack-service');
export default class BrowserstackLauncherService {
    _options;
    _config;
    browserstackLocal;
    _buildName;
    _projectName;
    _buildTag;
    constructor(_options, capabilities, _config) {
        this._options = _options;
        this._config = _config;
        // added to maintain backward compatibility with webdriverIO v5
        this._config || (this._config = _options);
        if (Array.isArray(capabilities)) {
            capabilities.forEach((capability) => {
                if (!capability['bstack:options']) {
                    const extensionCaps = Object.keys(capability).filter((cap) => cap.includes(':'));
                    if (extensionCaps.length) {
                        capability['bstack:options'] = { wdioService: bstackServiceVersion };
                    }
                    else if (shouldAddServiceVersion(this._config, this._options.testObservability)) {
                        capability['browserstack.wdioService'] = bstackServiceVersion;
                    }
                }
                else {
                    capability['bstack:options'].wdioService = bstackServiceVersion;
                    this._buildName = capability['bstack:options'].buildName;
                    this._projectName = capability['bstack:options'].projectName;
                    this._buildTag = capability['bstack:options'].buildTag;
                }
            });
        }
        else if (typeof capabilities === 'object') {
            Object.entries(capabilities).forEach(([, caps]) => {
                if (!caps.capabilities['bstack:options']) {
                    const extensionCaps = Object.keys(caps.capabilities).filter((cap) => cap.includes(':'));
                    if (extensionCaps.length) {
                        caps.capabilities['bstack:options'] = { wdioService: bstackServiceVersion };
                    }
                    else if (shouldAddServiceVersion(this._config, this._options.testObservability)) {
                        caps.capabilities['browserstack.wdioService'] = bstackServiceVersion;
                    }
                }
                else {
                    const bstackOptions = caps.capabilities['bstack:options'];
                    bstackOptions.wdioService = bstackServiceVersion;
                    this._buildName = bstackOptions.buildName;
                    this._projectName = bstackOptions.projectName;
                    this._buildTag = bstackOptions.buildTag;
                }
            });
        }
        // by default observability will be true unless specified as false
        this._options.testObservability = this._options.testObservability === false ? false : true;
        if (this._options.testObservability
            &&
                // update files to run if it's a rerun
                process.env.BROWSERSTACK_RERUN && process.env.BROWSERSTACK_RERUN_TESTS) {
            this._config.specs = process.env.BROWSERSTACK_RERUN_TESTS.split(',');
        }
    }
    async onPrepare(config, capabilities) {
        /**
         * Upload app to BrowserStack if valid file path to app is given.
         * Update app value of capability directly if app_url, custom_id, shareable_id is given
         */
        if (!this._options.app) {
            log.info('app is not defined in browserstack-service config, skipping ...');
        }
        else {
            let app = {};
            const appConfig = this._options.app;
            try {
                app = await this._validateApp(appConfig);
            }
            catch (error) {
                throw new SevereServiceError(error);
            }
            if (VALID_APP_EXTENSION.includes(path.extname(app.app))) {
                if (fs.existsSync(app.app)) {
                    const data = await this._uploadApp(app);
                    log.info(`app upload completed: ${JSON.stringify(data)}`);
                    app.app = data.app_url;
                }
                else if (app.customId) {
                    app.app = app.customId;
                }
                else {
                    throw new SevereServiceError(`[Invalid app path] app path ${app.app} is not correct, Provide correct path to app under test`);
                }
            }
            log.info(`Using app: ${app.app}`);
            this._updateCaps(capabilities, 'app', app.app);
        }
        if (this._options.testObservability) {
            log.debug('Sending launch start event');
            await launchTestSession(this._options, this._config, {
                projectName: this._projectName,
                buildName: this._buildName,
                buildTag: this._buildTag,
                bstackServiceVersion: bstackServiceVersion
            });
        }
        if (!this._options.browserstackLocal) {
            return log.info('browserstackLocal is not enabled - skipping...');
        }
        const opts = {
            key: this._config.key,
            ...this._options.opts
        };
        this.browserstackLocal = new BrowserstackLocalLauncher.Local();
        this._updateCaps(capabilities, 'local');
        /**
         * measure BrowserStack tunnel boot time
         */
        const obs = new PerformanceObserver((list) => {
            const entry = list.getEntries()[0];
            log.info(`Browserstack Local successfully started after ${entry.duration}ms`);
        });
        obs.observe({ entryTypes: ['measure'] });
        let timer;
        performance.mark('tbTunnelStart');
        return Promise.race([
            promisify(this.browserstackLocal.start.bind(this.browserstackLocal))(opts),
            new Promise((resolve, reject) => {
                /* istanbul ignore next */
                timer = setTimeout(function () {
                    reject('Browserstack Local failed to start within 60 seconds!');
                }, 60000);
            })
        ]).then(function (result) {
            clearTimeout(timer);
            performance.mark('tbTunnelEnd');
            performance.measure('bootTime', 'tbTunnelStart', 'tbTunnelEnd');
            return Promise.resolve(result);
        }, function (err) {
            clearTimeout(timer);
            return Promise.reject(err);
        });
    }
    async onComplete() {
        if (this._options.testObservability) {
            log.debug('Sending stop launch event');
            await stopBuildUpstream();
            if (process.env.BS_TESTOPS_BUILD_HASHED_ID) {
                console.log(`\nVisit https://observability.browserstack.com/builds/${process.env.BS_TESTOPS_BUILD_HASHED_ID} to view build report, insights, and many more debugging information all at one place!\n`);
            }
        }
        if (!this.browserstackLocal || !this.browserstackLocal.isRunning()) {
            return;
        }
        if (this._options.forcedStop) {
            return process.kill(this.browserstackLocal.pid);
        }
        let timer;
        return Promise.race([
            new Promise((resolve, reject) => {
                this.browserstackLocal?.stop((err) => {
                    if (err) {
                        return reject(err);
                    }
                    resolve();
                });
            }),
            new Promise((resolve, reject) => {
                /* istanbul ignore next */
                timer = setTimeout(() => reject(new Error('Browserstack Local failed to stop within 60 seconds!')), 60000);
            })
        ]).then(function (result) {
            clearTimeout(timer);
            return Promise.resolve(result);
        }, function (err) {
            clearTimeout(timer);
            return Promise.reject(err);
        });
    }
    async _uploadApp(app) {
        log.info(`uploading app ${app.app} ${app.customId ? `and custom_id: ${app.customId}` : ''} to browserstack`);
        const form = new FormData();
        if (app.app) {
            form.append('file', fs.createReadStream(app.app));
        }
        if (app.customId) {
            form.append('custom_id', app.customId);
        }
        const res = await got.post('https://api-cloud.browserstack.com/app-automate/upload', {
            body: form,
            username: this._config.user,
            password: this._config.key
        }).json().catch((err) => {
            throw new SevereServiceError(`app upload failed ${err.message}`);
        });
        return res;
    }
    /**
     * @param  {String | AppConfig}  appConfig    <string>: should be "app file path" or "app_url" or "custom_id" or "shareable_id".
     *                                            <object>: only "path" and "custom_id" should coexist as multiple properties.
     */
    async _validateApp(appConfig) {
        const app = {};
        if (typeof appConfig === 'string') {
            app.app = appConfig;
        }
        else if (typeof appConfig === 'object' && Object.keys(appConfig).length) {
            if (Object.keys(appConfig).length > 2 || (Object.keys(appConfig).length === 2 && (!appConfig.path || !appConfig.custom_id))) {
                throw new SevereServiceError(`keys ${Object.keys(appConfig)} can't co-exist as app values, use any one property from
                            {id<string>, path<string>, custom_id<string>, shareable_id<string>}, only "path" and "custom_id" can co-exist.`);
            }
            app.app = appConfig.id || appConfig.path || appConfig.custom_id || appConfig.shareable_id;
            app.customId = appConfig.custom_id;
        }
        else {
            throw new SevereServiceError('[Invalid format] app should be string or an object');
        }
        if (!app.app) {
            throw new SevereServiceError(`[Invalid app property] supported properties are {id<string>, path<string>, custom_id<string>, shareable_id<string>}.
                        For more details please visit https://www.browserstack.com/docs/app-automate/appium/set-up-tests/specify-app ')`);
        }
        return app;
    }
    _updateCaps(capabilities, capType, value) {
        if (Array.isArray(capabilities)) {
            capabilities.forEach((capability) => {
                if (!capability['bstack:options']) {
                    const extensionCaps = Object.keys(capability).filter((cap) => cap.includes(':'));
                    if (extensionCaps.length) {
                        if (capType === 'local') {
                            capability['bstack:options'] = { local: true };
                        }
                        else if (capType === 'app') {
                            capability['appium:app'] = value;
                        }
                    }
                    else if (capType === 'local') {
                        capability['browserstack.local'] = true;
                    }
                    else if (capType === 'app') {
                        capability.app = value;
                    }
                }
                else if (capType === 'local') {
                    capability['bstack:options'].local = true;
                }
                else if (capType === 'app') {
                    capability['appium:app'] = value;
                }
            });
        }
        else if (typeof capabilities === 'object') {
            Object.entries(capabilities).forEach(([, caps]) => {
                if (!caps.capabilities['bstack:options']) {
                    const extensionCaps = Object.keys(caps.capabilities).filter((cap) => cap.includes(':'));
                    if (extensionCaps.length) {
                        if (capType === 'local') {
                            caps.capabilities['bstack:options'] = { local: true };
                        }
                        else if (capType === 'app') {
                            caps.capabilities['appium:app'] = value;
                        }
                    }
                    else if (capType === 'local') {
                        caps.capabilities['browserstack.local'] = true;
                    }
                    else if (capType === 'app') {
                        caps.capabilities.app = value;
                    }
                }
                else if (capType === 'local') {
                    caps.capabilities['bstack:options'].local = true;
                }
                else if (capType === 'app') {
                    caps.capabilities['appium:app'] = value;
                }
            });
        }
        else {
            throw new SevereServiceError('Capabilities should be an object or Array!');
        }
    }
}
